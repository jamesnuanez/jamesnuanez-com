[
  {
    "key": 1,
    "title": "Cash Tracker",
    "url": "cash-tracker",
    "stack": [
      "Node.js",
      "Express",
      "MySQL",
      "EJS",
      "Git"
    ],
    "description-short": "Multi-user financial tracking software for families carrying cash",
    "description-long": "This application allows a group of people to have a common pool of cash while also managing their own balances within that total. Create an account, add one or more other users, and each person can add and edit transactions, or transfer an amount to someone else on the account. The transaction register can show all transactions for the entire group, or just show transactions for a specific user. Users can then reconcile their own individual cash balances, or reconcile the entire group balance.",
    "features": [
      "Add and edit transactions",
      "Transfer an amount between users",
      "Reconcile individual balances or total balance",
      "Filter transactions by individual",
      "User authentication",
      "Multi-user accounts",
      "Password reset for yourself or others on account",
      "Responsive design"
    ],
    "link-website": "http://cash.jamesnuanez.com"
  },
  {
    "key": 2,
    "title": "Starter App",
    "url": "starter-app",
    "stack": [
      "Node.js",
      "Express",
      "MongoDB",
      "EJS",
      "Passport.js",
      "Cookie Parser",
      "GitHub"
    ],
    "description-short": "Jump start a full stack user based application with Node and Mongo",
    "description-long": "This fully functional starter application is built with Node.js, Express, MongoDB, Mongoose, Passport.js, and Nodemailer, and includes full-featured user management. Code is open source and available on GitHub.",
    "features": [
      "Account creation",
      "User authentication",
      "Password reset",
      "Verification emails",
      "Email and password change",
      "User invitation",
      "Account deletion"
    ],
    "link-github": "https://github.com/jamesnuanez/node-mongo-starter-app",
    "link-website": "https://starter.jamesnuanez.com"
  },
  {
    "key": 3,
    "title": "Call Search",
    "tagline": "For Phone.com",
    "url": "call-search",
    "stack": [
      "Node.js",
      "Express",
      "MySQL",
      "EJS",
      "AWS"
    ],
    "description-short": "Collects, reconciles, and presents call data in a searchable GUI",
    "description-long": "This application allows customer support management to browse, filter, and search for customer support calls. The application automatically collects call details from an external API and reconciles the data to call recordings stored in S3. This project encompasses an entire AWS application infrastructure, including a dedicated VPC with public and private subnets, an internet gateway, NAT gateway, and an S3 endpoint. Serverless Lambda Functions are used to process recordings, perform API data collection, and reconcile data.",
    "features": [
      "A dedicated VPC (including subnets, gateways, and an S3 endpoint)",
      "MySQL RDS Database",
      "Storage in S3",
      "Lambda Functions triggered by S3 uploads",
      "Lambda Functions scheduled by CloudWatch Events",
      "Connects to an external SOAP API",
      "Web application code running on an EC2 instance",
      "SNS alerts for error handling"
    ]
  },
  {
    "key": 4,
    "title": "VoIP Stats",
    "tagline": "For Phone.com",
    "url": "voip-stats",
    "stack": [
      "Node.js",
      "Express",
      "MySQL",
      "EJS",
      "Bash",
      "D3.js",
      "PagerDuty API",
      "Jira API"
    ],
    "description-short": "Collects and presents VoIP and system stats in a centralized GUI",
    "description-long": "This application collects VoIP and system statistics from various services using Bash scripts and by hitting APIs and saving the data to a local database. Stats are accessible by date or date range.",
    "features": [
      "Bash scripts collect images from other web services",
      "Stats accessible by date or date range",
      "Pie and bar chart visualizations using D3.js",
      "Uptime calculated on-the-fly",
      "Local MySQL database",
      "PagerDuty API integration",
      "Jira API integration",
      "Hosted on an EC2 instance in AWS"
    ]
  },
  {
    "key": 5,
    "title": "J. M. M. Nuanez",
    "tagline": "Author Website",
    "url": "jmm-nuanez",
    "stack": [
      "Node.js",
      "Express",
      "MySQL",
      "EJS",
      "Nodemailer",
      "Request",
      "MailChimp API",
      "Git"
    ],
    "description-short": "Author website with custom newsletter and contact forms",
    "description-long": "Author website with custom newsletter and contact forms that save to a local database, connect to the MailChimp API, and send emails to the author and optionally to the site visitor.",
    "features": [
      "Newsletter sign-up and subscription modification",
      "Contact form with spam filtering and optional newsletter sign-up",
      "Visitors can optionally get a copy of their message",
      "Messages emailed in a custom email design",
      "Local database for newsletter sign-ups and contact form messages",
      "Mailchimp API integration",
      "JavaScript history API",
      "Responsive design"
    ],
    "link-website": "http://www.jmmnuanez.com"
  },
  {
    "key": 6,
    "title": "Sweet Via Patisserie",
    "tagline": "Local Business",
    "url": "sweet-via",
    "stack": [
      "Node.js",
      "Express",
      "EJS",
      "Nodemailer",
      "Request",
      "Instagram API",
      "Git"
    ],
    "description-short": "Website for a local business with custom order forms",
    "description-long": "Responsive website for a local patisserie. Connects to the Instagram API to display recent images and includes multiple contact forms for customers to ask questions or place orders. Messages are emailed to the business owner.",
    "features": [
      "Instagram API integration",
      "Contact forms with spam filtering",
      "Responsive design"
    ],
    "link-website": "http://www.sweetviapatisserie.com"
  }
]
